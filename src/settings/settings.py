"""
Django settings for electric project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os, sentry_sdk
from google.oauth2 import service_account
from google.auth.transport.requests import Request

from pathlib import Path
from datetime import timedelta

# import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'dev') 

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.getenv('DEBUG', '1')))

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', default='*').split(',')


# Application definition

INSTALLED_APPS = [
    'daphne',
    'src.settings',
    'src.accounts',
    'src.electric_app',
    'src.chat',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'channels',
    'corsheaders',
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'src.electric_app.urls'

AUTH_USER_MODEL = 'accounts.User'

PASSWORD_MIN_LENGTH = 7


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'src.settings.wsgi.application'

ASGI_APPLICATION = 'src.settings.asgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'electric_db'),
        'USER': os.getenv('POSTGRES_USER', 'postgres'),
        'PORT': '5432',
        'HOST': os.getenv('DB_HOST'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
    }
}

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [(os.getenv('REDIS-HOST', '127.0.0.1'), 6379)],
        },
    },
}

BASE_URL = os.getenv('BASE_URL', 'http://127.0.0.1:8000')

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Johannesburg'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/



STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MEDIA_URL = '/media/'
# Add this after your STATIC_URL definition
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'

# Define STATICFILES_DIRS to tell Django where to look for static files
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'settings/static'),
# ]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

sentry_sdk.init(
    dsn=os.getenv('SENTRY_DSN'),
    integrations=[
        DjangoIntegration(),
    ],

    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    # We recommend adjusting this value in production.
    traces_sample_rate=1.0,

    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    send_default_pii=True
)

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
}

SIMPLE_JWT = {
    # 'ACCESS_TOKEN_LIFETIME': timedelta(days=365*100), # which means it will expire in 100 year ~= (never going to expire)
    "ACCESS_TOKEN_LIFETIME": timedelta(days=365),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=365*100),
    "ROTATE_REFRESH_TOKENS": True,
}


# -----------------------------------------------------------------------------
# AWS Settings
# -----------------------------------------------------------------------------

# ACCESS KEYS
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_REGION_NAME = os.getenv('AWS_REGION_NAME', 'us-east-1')

if not DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', 'info@leviandsoninvestment.co.za')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', 'jvsbtdfnfzqwelzx')


DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'info@leviandsoninvestment.co.za')

AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_S3_BUCKET', 'levi-and-son')
AWS_S3_ADDRESSING_STYLE = 'virtual'
AWS_S3_FILE_OVERWRITE = False
AWS_LOCATION = 'uploads'
AWS_S3_MAX_MEMORY_SIZE = 5 * 1024 * 1024  # (5 MB in bytes)
AWS_S3_HOST = f's3-{AWS_REGION_NAME}.amazonaws.com'

if not DEBUG:
    DEFAULT_FILE_STORAGE = 'src.settings.s3_storage.PublicMediaStorage'

CORS_ALLOWED_ORIGINS = [
   os.getenv('ADMIN-APP-URL', 'http://localhost:4200'),
   os.getenv('CLIENT-WEBSITE-URL', 'http://localhost:53411'),
]

CORS_ALLOW_CREDENTIALS = True

CSRF_COOKIE_SECURE = True

if not DEBUG: 
    CSRF_TRUSTED_ORIGINS = [
        os.getenv('SERVER'),
    ]

# Firebase Push Notification configuration

# Load your service account key
FCM_CREDENTIALS = service_account.Credentials.from_service_account_file(
    'firebase/serviceAccountKey.json',
    scopes=["https://www.googleapis.com/auth/firebase.messaging"]
)

# Refresh the token
FCM_CREDENTIALS.refresh(Request())
FCM_ACCESS_TOKEN = FCM_CREDENTIALS.token

# Set your project ID
PROJECT_ID = 'test-mobile-app-74c60'

# Firebase Messaging endpoint
FCM_URL = f"https://fcm.googleapis.com/v1/projects/{PROJECT_ID}/messages:send"

# Set headers
FCM_HEADERS = {
    "Authorization": f"Bearer {FCM_ACCESS_TOKEN}",
    "Content-Type": "application/json; UTF-8",
}
